syntax = "proto3";
package diagnosticspb;

import "gogoproto/gogo.proto";
import "rustproto.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (rustproto.lite_runtime_all) = true;

option java_package = "org.tikv.kvproto";

// Diagnostics service for TiDB cluster components.
service Diagnostics {
	// Searchs log in the target node
	rpc search_log(SearchLogRequest) returns (stream SearchLogResponse) {};
	// Retrieves server info in the target node
	rpc server_info(ServerInfoRequest) returns (ServerInfoResponse) {};
	// Search tikv hot regions in pd node
	rpc search_hot_regions(SearchHotRegionsRequest) returns (stream SearchHotRegionsResponse){};
}

enum LogLevel {
	UNKNOWN = 0;
	Debug = 1;
	Info = 2;
	Warn = 3;
	Trace = 4;
	Critical = 5;
	Error = 6;
}

message SearchLogRequest {
	enum Target {
		Normal = 0;
		Slow = 1;
	}
	int64 start_time = 1;
	int64 end_time = 2;
	repeated LogLevel levels = 3;
	// We use a string array to represent multiple CNF pattern sceniaor like:
	// SELECT * FROM t WHERE c LIKE '%s%' and c REGEXP '.*a.*' because
	// Golang and Rust don't support perl-like (?=re1)(?=re2)
	repeated string patterns = 4;
	Target target = 5;
}

message SearchLogResponse {
	repeated LogMessage messages = 1;
}

message LogMessage {
	int64 time = 1;
	LogLevel level = 2;
	string message = 3;
}

enum ServerInfoType {
	All = 0;
	HardwareInfo = 1;
	SystemInfo = 2;
	LoadInfo = 3;
}

message ServerInfoRequest {
	ServerInfoType tp = 1;
}

message ServerInfoPair {
	string key = 1;
	string value = 2;
}

message ServerInfoItem {
	// cpu, memory, disk, network ...
	string tp = 1;
	// eg. network: lo1/eth0, cpu: core1/core2, disk: sda1/sda2 
	string name = 2;
	// all key-value pairs for specified item, e.g:
	// ServerInfoItem {
	//     tp = "network"
	//     name = "eth0"
	//     paris = [
	//         ServerInfoPair { key = "readbytes", value = "4k"},
	//         ServerInfoPair { key = "writebytes", value = "1k"},
	//     ]
	// }
	repeated ServerInfoPair pairs = 3;
}

message ServerInfoResponse {
	repeated ServerInfoItem items = 1;
}

enum HotRegionType { 
	Read = 0;
	Write = 1;	
}

message SearchHotRegionsRequest{
	int64 start_time = 1;
	int64 end_time = 2;
	repeated uint64 region_id = 3;
	repeated uint64 store_id = 4;
	HotRegionType hot_region_type = 5;
	float low_hot_degree = 6;
	float high_hot_degree = 7;
	float low_flow_bytes = 8;
	float high_flow_bytes = 9;
	float low_key_rate = 10;
	float high_key_rate = 11;
	float low_query_rate = 12;
	float high_query_rate = 13;
}

message SearchHotRegionsResponse{
	repeated HotRegionsMessages messages = 1;	
}

message HotRegionsMessages{
	int64 update_time = 1;
	uint64 region_id = 2;
	uint64 store_id = 3;
	HotRegionType hot_region_type = 4;
	float hot_degree = 5;
	float flow_bytes = 6;
	float key_rate = 7;
	float query_rate = 8;
	bytes start_key = 9; 
	bytes end_key = 10;
}
