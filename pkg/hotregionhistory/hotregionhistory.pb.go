// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hotregionhistory.proto

package hotregionhistory

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	encoding_binary "encoding/binary"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HotRegionType int32

const (
	HotRegionType_Read  HotRegionType = 0
	HotRegionType_Write HotRegionType = 1
)

var HotRegionType_name = map[int32]string{
	0: "Read",
	1: "Write",
}
var HotRegionType_value = map[string]int32{
	"Read":  0,
	"Write": 1,
}

func (x HotRegionType) String() string {
	return proto.EnumName(HotRegionType_name, int32(x))
}
func (HotRegionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_hotregionhistory_5d0f6238d14b84bf, []int{0}
}

type SearchHotRegionsRequest struct {
	StartTime            int64         `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64         `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	RegionId             []uint64      `protobuf:"varint,3,rep,packed,name=region_id,json=regionId" json:"region_id,omitempty"`
	StoreId              []uint64      `protobuf:"varint,4,rep,packed,name=store_id,json=storeId" json:"store_id,omitempty"`
	HotRegionType        HotRegionType `protobuf:"varint,5,opt,name=hot_region_type,json=hotRegionType,proto3,enum=hotregionhistory.HotRegionType" json:"hot_region_type,omitempty"`
	LowHotDegree         float32       `protobuf:"fixed32,6,opt,name=low_hot_degree,json=lowHotDegree,proto3" json:"low_hot_degree,omitempty"`
	HighHotDegree        float32       `protobuf:"fixed32,7,opt,name=high_hot_degree,json=highHotDegree,proto3" json:"high_hot_degree,omitempty"`
	LowFlowBytes         float32       `protobuf:"fixed32,8,opt,name=low_flow_bytes,json=lowFlowBytes,proto3" json:"low_flow_bytes,omitempty"`
	HighFlowBytes        float32       `protobuf:"fixed32,9,opt,name=high_flow_bytes,json=highFlowBytes,proto3" json:"high_flow_bytes,omitempty"`
	LowKeyRate           float32       `protobuf:"fixed32,10,opt,name=low_key_rate,json=lowKeyRate,proto3" json:"low_key_rate,omitempty"`
	HighKeyRate          float32       `protobuf:"fixed32,11,opt,name=high_key_rate,json=highKeyRate,proto3" json:"high_key_rate,omitempty"`
	LowQueryRate         float32       `protobuf:"fixed32,12,opt,name=low_query_rate,json=lowQueryRate,proto3" json:"low_query_rate,omitempty"`
	HighQueryRate        float32       `protobuf:"fixed32,13,opt,name=high_query_rate,json=highQueryRate,proto3" json:"high_query_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SearchHotRegionsRequest) Reset()         { *m = SearchHotRegionsRequest{} }
func (m *SearchHotRegionsRequest) String() string { return proto.CompactTextString(m) }
func (*SearchHotRegionsRequest) ProtoMessage()    {}
func (*SearchHotRegionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hotregionhistory_5d0f6238d14b84bf, []int{0}
}
func (m *SearchHotRegionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchHotRegionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchHotRegionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchHotRegionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchHotRegionsRequest.Merge(dst, src)
}
func (m *SearchHotRegionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchHotRegionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchHotRegionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchHotRegionsRequest proto.InternalMessageInfo

func (m *SearchHotRegionsRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetRegionId() []uint64 {
	if m != nil {
		return m.RegionId
	}
	return nil
}

func (m *SearchHotRegionsRequest) GetStoreId() []uint64 {
	if m != nil {
		return m.StoreId
	}
	return nil
}

func (m *SearchHotRegionsRequest) GetHotRegionType() HotRegionType {
	if m != nil {
		return m.HotRegionType
	}
	return HotRegionType_Read
}

func (m *SearchHotRegionsRequest) GetLowHotDegree() float32 {
	if m != nil {
		return m.LowHotDegree
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetHighHotDegree() float32 {
	if m != nil {
		return m.HighHotDegree
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetLowFlowBytes() float32 {
	if m != nil {
		return m.LowFlowBytes
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetHighFlowBytes() float32 {
	if m != nil {
		return m.HighFlowBytes
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetLowKeyRate() float32 {
	if m != nil {
		return m.LowKeyRate
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetHighKeyRate() float32 {
	if m != nil {
		return m.HighKeyRate
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetLowQueryRate() float32 {
	if m != nil {
		return m.LowQueryRate
	}
	return 0
}

func (m *SearchHotRegionsRequest) GetHighQueryRate() float32 {
	if m != nil {
		return m.HighQueryRate
	}
	return 0
}

type SearchHotRegionsResponse struct {
	Messages             []*HotRegionsMessages `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SearchHotRegionsResponse) Reset()         { *m = SearchHotRegionsResponse{} }
func (m *SearchHotRegionsResponse) String() string { return proto.CompactTextString(m) }
func (*SearchHotRegionsResponse) ProtoMessage()    {}
func (*SearchHotRegionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_hotregionhistory_5d0f6238d14b84bf, []int{1}
}
func (m *SearchHotRegionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchHotRegionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchHotRegionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchHotRegionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchHotRegionsResponse.Merge(dst, src)
}
func (m *SearchHotRegionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchHotRegionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchHotRegionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchHotRegionsResponse proto.InternalMessageInfo

func (m *SearchHotRegionsResponse) GetMessages() []*HotRegionsMessages {
	if m != nil {
		return m.Messages
	}
	return nil
}

type HotRegionsMessages struct {
	UpdateTime           int64         `protobuf:"varint,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RegionId             uint64        `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	StoreId              uint64        `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	HotRegionType        HotRegionType `protobuf:"varint,4,opt,name=hot_region_type,json=hotRegionType,proto3,enum=hotregionhistory.HotRegionType" json:"hot_region_type,omitempty"`
	HotDegree            float32       `protobuf:"fixed32,5,opt,name=hot_degree,json=hotDegree,proto3" json:"hot_degree,omitempty"`
	FlowBytes            float32       `protobuf:"fixed32,6,opt,name=flow_bytes,json=flowBytes,proto3" json:"flow_bytes,omitempty"`
	KeyRate              float32       `protobuf:"fixed32,7,opt,name=key_rate,json=keyRate,proto3" json:"key_rate,omitempty"`
	QueryRate            float32       `protobuf:"fixed32,8,opt,name=query_rate,json=queryRate,proto3" json:"query_rate,omitempty"`
	StartKey             []byte        `protobuf:"bytes,9,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey               []byte        `protobuf:"bytes,10,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HotRegionsMessages) Reset()         { *m = HotRegionsMessages{} }
func (m *HotRegionsMessages) String() string { return proto.CompactTextString(m) }
func (*HotRegionsMessages) ProtoMessage()    {}
func (*HotRegionsMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_hotregionhistory_5d0f6238d14b84bf, []int{2}
}
func (m *HotRegionsMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotRegionsMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotRegionsMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HotRegionsMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotRegionsMessages.Merge(dst, src)
}
func (m *HotRegionsMessages) XXX_Size() int {
	return m.Size()
}
func (m *HotRegionsMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_HotRegionsMessages.DiscardUnknown(m)
}

var xxx_messageInfo_HotRegionsMessages proto.InternalMessageInfo

func (m *HotRegionsMessages) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *HotRegionsMessages) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *HotRegionsMessages) GetStoreId() uint64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *HotRegionsMessages) GetHotRegionType() HotRegionType {
	if m != nil {
		return m.HotRegionType
	}
	return HotRegionType_Read
}

func (m *HotRegionsMessages) GetHotDegree() float32 {
	if m != nil {
		return m.HotDegree
	}
	return 0
}

func (m *HotRegionsMessages) GetFlowBytes() float32 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *HotRegionsMessages) GetKeyRate() float32 {
	if m != nil {
		return m.KeyRate
	}
	return 0
}

func (m *HotRegionsMessages) GetQueryRate() float32 {
	if m != nil {
		return m.QueryRate
	}
	return 0
}

func (m *HotRegionsMessages) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *HotRegionsMessages) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchHotRegionsRequest)(nil), "hotregionhistory.SearchHotRegionsRequest")
	proto.RegisterType((*SearchHotRegionsResponse)(nil), "hotregionhistory.SearchHotRegionsResponse")
	proto.RegisterType((*HotRegionsMessages)(nil), "hotregionhistory.HotRegionsMessages")
	proto.RegisterEnum("hotregionhistory.HotRegionType", HotRegionType_name, HotRegionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HotRegionsHistory service

type HotRegionsHistoryClient interface {
	SearchHotRegions(ctx context.Context, in *SearchHotRegionsRequest, opts ...grpc.CallOption) (HotRegionsHistory_SearchHotRegionsClient, error)
}

type hotRegionsHistoryClient struct {
	cc *grpc.ClientConn
}

func NewHotRegionsHistoryClient(cc *grpc.ClientConn) HotRegionsHistoryClient {
	return &hotRegionsHistoryClient{cc}
}

func (c *hotRegionsHistoryClient) SearchHotRegions(ctx context.Context, in *SearchHotRegionsRequest, opts ...grpc.CallOption) (HotRegionsHistory_SearchHotRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HotRegionsHistory_serviceDesc.Streams[0], "/hotregionhistory.HotRegionsHistory/search_hot_regions", opts...)
	if err != nil {
		return nil, err
	}
	x := &hotRegionsHistorySearchHotRegionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HotRegionsHistory_SearchHotRegionsClient interface {
	Recv() (*SearchHotRegionsResponse, error)
	grpc.ClientStream
}

type hotRegionsHistorySearchHotRegionsClient struct {
	grpc.ClientStream
}

func (x *hotRegionsHistorySearchHotRegionsClient) Recv() (*SearchHotRegionsResponse, error) {
	m := new(SearchHotRegionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HotRegionsHistory service

type HotRegionsHistoryServer interface {
	SearchHotRegions(*SearchHotRegionsRequest, HotRegionsHistory_SearchHotRegionsServer) error
}

func RegisterHotRegionsHistoryServer(s *grpc.Server, srv HotRegionsHistoryServer) {
	s.RegisterService(&_HotRegionsHistory_serviceDesc, srv)
}

func _HotRegionsHistory_SearchHotRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchHotRegionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HotRegionsHistoryServer).SearchHotRegions(m, &hotRegionsHistorySearchHotRegionsServer{stream})
}

type HotRegionsHistory_SearchHotRegionsServer interface {
	Send(*SearchHotRegionsResponse) error
	grpc.ServerStream
}

type hotRegionsHistorySearchHotRegionsServer struct {
	grpc.ServerStream
}

func (x *hotRegionsHistorySearchHotRegionsServer) Send(m *SearchHotRegionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _HotRegionsHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hotregionhistory.HotRegionsHistory",
	HandlerType: (*HotRegionsHistoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "search_hot_regions",
			Handler:       _HotRegionsHistory_SearchHotRegions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hotregionhistory.proto",
}

func (m *SearchHotRegionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchHotRegionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.EndTime))
	}
	if len(m.RegionId) > 0 {
		dAtA2 := make([]byte, len(m.RegionId)*10)
		var j1 int
		for _, num := range m.RegionId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.StoreId) > 0 {
		dAtA4 := make([]byte, len(m.StoreId)*10)
		var j3 int
		for _, num := range m.StoreId {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.HotRegionType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.HotRegionType))
	}
	if m.LowHotDegree != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LowHotDegree))))
		i += 4
	}
	if m.HighHotDegree != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HighHotDegree))))
		i += 4
	}
	if m.LowFlowBytes != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LowFlowBytes))))
		i += 4
	}
	if m.HighFlowBytes != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HighFlowBytes))))
		i += 4
	}
	if m.LowKeyRate != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LowKeyRate))))
		i += 4
	}
	if m.HighKeyRate != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HighKeyRate))))
		i += 4
	}
	if m.LowQueryRate != 0 {
		dAtA[i] = 0x65
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LowQueryRate))))
		i += 4
	}
	if m.HighQueryRate != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HighQueryRate))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchHotRegionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchHotRegionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHotregionhistory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HotRegionsMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotRegionsMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.UpdateTime))
	}
	if m.RegionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.RegionId))
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.StoreId))
	}
	if m.HotRegionType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(m.HotRegionType))
	}
	if m.HotDegree != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HotDegree))))
		i += 4
	}
	if m.FlowBytes != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FlowBytes))))
		i += 4
	}
	if m.KeyRate != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.KeyRate))))
		i += 4
	}
	if m.QueryRate != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.QueryRate))))
		i += 4
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintHotregionhistory(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHotregionhistory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SearchHotRegionsRequest) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovHotregionhistory(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovHotregionhistory(uint64(m.EndTime))
	}
	if len(m.RegionId) > 0 {
		l = 0
		for _, e := range m.RegionId {
			l += sovHotregionhistory(uint64(e))
		}
		n += 1 + sovHotregionhistory(uint64(l)) + l
	}
	if len(m.StoreId) > 0 {
		l = 0
		for _, e := range m.StoreId {
			l += sovHotregionhistory(uint64(e))
		}
		n += 1 + sovHotregionhistory(uint64(l)) + l
	}
	if m.HotRegionType != 0 {
		n += 1 + sovHotregionhistory(uint64(m.HotRegionType))
	}
	if m.LowHotDegree != 0 {
		n += 5
	}
	if m.HighHotDegree != 0 {
		n += 5
	}
	if m.LowFlowBytes != 0 {
		n += 5
	}
	if m.HighFlowBytes != 0 {
		n += 5
	}
	if m.LowKeyRate != 0 {
		n += 5
	}
	if m.HighKeyRate != 0 {
		n += 5
	}
	if m.LowQueryRate != 0 {
		n += 5
	}
	if m.HighQueryRate != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchHotRegionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovHotregionhistory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotRegionsMessages) Size() (n int) {
	var l int
	_ = l
	if m.UpdateTime != 0 {
		n += 1 + sovHotregionhistory(uint64(m.UpdateTime))
	}
	if m.RegionId != 0 {
		n += 1 + sovHotregionhistory(uint64(m.RegionId))
	}
	if m.StoreId != 0 {
		n += 1 + sovHotregionhistory(uint64(m.StoreId))
	}
	if m.HotRegionType != 0 {
		n += 1 + sovHotregionhistory(uint64(m.HotRegionType))
	}
	if m.HotDegree != 0 {
		n += 5
	}
	if m.FlowBytes != 0 {
		n += 5
	}
	if m.KeyRate != 0 {
		n += 5
	}
	if m.QueryRate != 0 {
		n += 5
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovHotregionhistory(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovHotregionhistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHotregionhistory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHotregionhistory(x uint64) (n int) {
	return sovHotregionhistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchHotRegionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotregionhistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchHotRegionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchHotRegionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotregionhistory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RegionId = append(m.RegionId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotregionhistory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHotregionhistory
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHotregionhistory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RegionId = append(m.RegionId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotregionhistory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StoreId = append(m.StoreId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHotregionhistory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHotregionhistory
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHotregionhistory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StoreId = append(m.StoreId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotRegionType", wireType)
			}
			m.HotRegionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotRegionType |= (HotRegionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowHotDegree", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LowHotDegree = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighHotDegree", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HighHotDegree = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowFlowBytes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LowFlowBytes = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighFlowBytes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HighFlowBytes = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowKeyRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LowKeyRate = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighKeyRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HighKeyRate = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowQueryRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LowQueryRate = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighQueryRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HighQueryRate = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHotregionhistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchHotRegionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotregionhistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchHotRegionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchHotRegionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HotRegionsMessages{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotregionhistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotRegionsMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHotregionhistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotRegionsMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotRegionsMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotRegionType", wireType)
			}
			m.HotRegionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotRegionType |= (HotRegionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotDegree", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HotDegree = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FlowBytes = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.KeyRate = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.QueryRate = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHotregionhistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHotregionhistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHotregionhistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHotregionhistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHotregionhistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHotregionhistory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHotregionhistory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHotregionhistory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHotregionhistory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHotregionhistory   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("hotregionhistory.proto", fileDescriptor_hotregionhistory_5d0f6238d14b84bf)
}

var fileDescriptor_hotregionhistory_5d0f6238d14b84bf = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x5e,
	0x10, 0xc5, 0xeb, 0xe6, 0xcb, 0x9e, 0x24, 0x6d, 0xfe, 0x57, 0x7f, 0x51, 0xb7, 0x55, 0x52, 0xcb,
	0x8a, 0x50, 0xe8, 0x22, 0xa0, 0xf0, 0x02, 0xa8, 0x42, 0x90, 0x2a, 0x62, 0x81, 0xa9, 0xc4, 0x06,
	0xc9, 0x72, 0xf1, 0xd4, 0xb6, 0xf2, 0x71, 0x13, 0xdf, 0x9b, 0x46, 0xde, 0xf7, 0x21, 0x78, 0x24,
	0x96, 0x3c, 0x02, 0x0a, 0x3c, 0x08, 0xba, 0x63, 0xd7, 0x36, 0x44, 0xad, 0x10, 0x9b, 0x24, 0x3e,
	0xe7, 0x37, 0x93, 0xf1, 0x9d, 0x63, 0xc3, 0x93, 0x90, 0xcb, 0x18, 0x83, 0x88, 0x2f, 0xc2, 0x48,
	0x48, 0x1e, 0x27, 0xc3, 0x65, 0xcc, 0x25, 0x67, 0x9d, 0x3f, 0xf5, 0x93, 0xff, 0x03, 0x1e, 0x70,
	0x32, 0x9f, 0xab, 0x5f, 0x29, 0x67, 0xdf, 0x55, 0xe1, 0xe8, 0x03, 0x7a, 0xf1, 0xe7, 0x70, 0xcc,
	0xa5, 0x43, 0x05, 0xc2, 0xc1, 0xd5, 0x1a, 0x85, 0x64, 0x5d, 0x00, 0x21, 0xbd, 0x58, 0xba, 0x32,
	0x9a, 0xa3, 0xa9, 0x59, 0xda, 0xa0, 0xe2, 0x18, 0xa4, 0x5c, 0x45, 0x73, 0x64, 0xc7, 0xa0, 0xe3,
	0xc2, 0x4f, 0xcd, 0x7d, 0x32, 0x1b, 0xb8, 0xf0, 0xc9, 0x3a, 0x05, 0x23, 0xfd, 0x73, 0x37, 0xf2,
	0xcd, 0x8a, 0x55, 0x19, 0x54, 0x1d, 0x3d, 0x15, 0x2e, 0x7d, 0x55, 0xa7, 0x26, 0x42, 0xe5, 0x55,
	0xc9, 0x6b, 0xd0, 0xf5, 0xa5, 0xcf, 0xde, 0xc2, 0x61, 0xc8, 0xa5, 0x9b, 0xd5, 0xca, 0x64, 0x89,
	0x66, 0xcd, 0xd2, 0x06, 0x07, 0xa3, 0xb3, 0xe1, 0xce, 0x7d, 0xe6, 0xf3, 0x5e, 0x25, 0x4b, 0x74,
	0xda, 0x61, 0xf9, 0x92, 0xf5, 0xe1, 0x60, 0xc6, 0x37, 0xae, 0x6a, 0xe6, 0x63, 0x10, 0x23, 0x9a,
	0x75, 0x4b, 0x1b, 0xec, 0x3b, 0xad, 0x19, 0xdf, 0x8c, 0xb9, 0x7c, 0x4d, 0x1a, 0x7b, 0x0a, 0x87,
	0x61, 0x14, 0x84, 0x65, 0xac, 0x41, 0x58, 0x5b, 0xc9, 0x05, 0x97, 0x75, 0xbb, 0x51, 0x1f, 0xd7,
	0x89, 0x44, 0x61, 0xea, 0x79, 0xb7, 0x37, 0x33, 0xbe, 0xb9, 0x50, 0x5a, 0xde, 0xad, 0x84, 0x19,
	0x45, 0xb7, 0x82, 0xb3, 0x40, 0xd5, 0xb9, 0x53, 0x4c, 0xdc, 0xd8, 0x93, 0x68, 0x02, 0x41, 0x30,
	0xe3, 0x9b, 0x09, 0x26, 0x8e, 0x27, 0x91, 0xd9, 0x40, 0x25, 0x05, 0xd2, 0x24, 0xa4, 0xa9, 0xc4,
	0x7b, 0x26, 0x9b, 0x69, 0xb5, 0xc6, 0x38, 0x83, 0x5a, 0xf9, 0x4c, 0xef, 0x95, 0x48, 0xd4, 0xfd,
	0x4c, 0x25, 0xac, 0x5d, 0xcc, 0x94, 0x73, 0xf6, 0x27, 0x30, 0x77, 0x53, 0x20, 0x96, 0x7c, 0x21,
	0x90, 0xbd, 0x02, 0x7d, 0x8e, 0x42, 0x78, 0x01, 0x0a, 0x53, 0xb3, 0x2a, 0x83, 0xe6, 0xa8, 0xff,
	0xc8, 0x36, 0xc4, 0xbb, 0x8c, 0x75, 0xf2, 0x2a, 0xfb, 0xe7, 0x3e, 0xb0, 0x5d, 0x80, 0x9d, 0x41,
	0x73, 0xbd, 0xf4, 0x3d, 0x89, 0xe5, 0x80, 0x41, 0x2a, 0xed, 0xc6, 0x48, 0x45, 0xec, 0xa1, 0x18,
	0x55, 0xc8, 0x7b, 0x2c, 0x46, 0xd5, 0x7f, 0x8a, 0x51, 0x17, 0xa0, 0x94, 0x8d, 0x1a, 0x9d, 0x9c,
	0x11, 0xe6, 0xb9, 0xe8, 0x02, 0x94, 0x96, 0x9d, 0x26, 0xcc, 0xb8, 0xc9, 0x17, 0x7d, 0x0c, 0x7a,
	0xbe, 0xc1, 0x34, 0x57, 0x8d, 0x69, 0xb6, 0xbd, 0x2e, 0x40, 0x69, 0x25, 0x69, 0x9a, 0x8c, 0x55,
	0xbe, 0xb6, 0x53, 0x48, 0x9f, 0x33, 0x95, 0x00, 0x0a, 0x51, 0xcb, 0xd1, 0x49, 0x98, 0x60, 0xc2,
	0x8e, 0x40, 0x3d, 0x67, 0x64, 0x01, 0x59, 0x75, 0x5c, 0xf8, 0x13, 0x4c, 0xce, 0xfb, 0xd0, 0xfe,
	0xed, 0x6e, 0x98, 0x0e, 0x55, 0x07, 0x3d, 0xbf, 0xb3, 0xc7, 0x0c, 0xa8, 0x7d, 0x8c, 0x23, 0x89,
	0x1d, 0x6d, 0x74, 0xa7, 0xc1, 0x7f, 0xc5, 0x32, 0xc6, 0xe9, 0x31, 0x30, 0x0e, 0x4c, 0x50, 0x00,
	0xdc, 0xe2, 0xe4, 0x04, 0x7b, 0xb6, 0x7b, 0x5e, 0x0f, 0xbc, 0x2c, 0x4e, 0xce, 0xff, 0x06, 0x4d,
	0x13, 0x65, 0xef, 0xbd, 0xd0, 0x2e, 0xec, 0xaf, 0xdb, 0x9e, 0xf6, 0x6d, 0xdb, 0xd3, 0xbe, 0x6f,
	0x7b, 0xda, 0x97, 0x1f, 0xbd, 0x3d, 0xe8, 0xf0, 0x38, 0x18, 0xca, 0x68, 0x7a, 0x3b, 0x9c, 0xde,
	0xd2, 0xcb, 0xe9, 0xba, 0x4e, 0x5f, 0x2f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xcb, 0xa3,
	0x0b, 0xe5, 0x04, 0x00, 0x00,
}
